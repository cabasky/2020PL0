2020.10.23
1.Add some new symbols and their reading method
    /*      :   SYM_BLOCKEXPLBEG
    */      :   SYM_BLOCKEXPLEND
    //      :   SYM_LINEEXPL
    goto    :   SYM_GOTO
    else    :   SYM_ELSE
    [       :   SYM_LSQ
    ]       :   SYM_RSQ
    !       :   SYM_NOT
    ***:    :   SYM_LINETAG
    &       :   SYM_ADR
    &&      :   SYM_NOT
    ||      :   SYM_OR

2.Add the function to deal with explanation.
    An explanation can be served as a '\n' grammarly.

2020.10.24

3.Well define the parameterlist of procedure.
    Regard mask->level as parameter num. Plan to make a chain for all procedure.
    In this meaning, the main block doesn't has parameterlist coz its level is 0.
    In other way, the address of parameter varies from -1 to -level.

4.Deal with re-defination problem.
    An identifier couldn't be same as any of previous identfier in the same block;
        If an local identfier has the same name with a global one, then any 
    call to the name refer to the local one.

    Compiler will check from parameterlist and previous identfier table.

    If a variable or a constant is redefinated, compiler will skip it.
    If a procedure is redefinated, compiler will skip its declaration but compiler
    its code.

2020.10.27

5.I have no choice but add 3 new instructions.
    1)ADR   levdif  address              Like LOD, find its real address and push it
    into stack.
    2)STA   levdif  address              Like STO, find the value, but regard the 
    value as a new address, pop the stack top into this new address.
    3)LOA   levdif  address              Like LOD, find the value, regard it as a 
    new address, find the value in the new address and push it into stack.

6.Complete the assignment to an actual.
    Use ADR/STO to initialize, and use STA to assign.
    initialize:
        &a=b:
        ADR b;
        STO a;
        (b=reftable[a]);
        (If b itself is an actual,then reftable[a]=reftable[b])
    assign:
        a=b, when a is an actual:
        STA a;


7.Complete the function to call an actual.
    Use LOA to read.

8.Complete the function to call procedure with parameters.
    Define an new arry globalParameterlist[maxTx],as the chain to find the parame-
    ters of an procedure. And another arry procparamnum[maxTx] to store the number
    of parameters of all the procedure.
    An function like this:
        procedure func(a,b,c,d);
    And we call it like this:
        call func(1,2,i*j,k+1)
    The a,b,c,d will have the address of -4,-3,-2,-1 in order.
    Before calling the func, we have to compute all the parameters and push the
    result into stack in oredr like this:
    stack    1   2 i*j k+1   *   *   *
      id   b-4 b-3 b-2 b-1   b b+1 b+2
    In the procedure func, to find parameters, we can samely use the way "base 
    address + offset address" to find it as normal variable.
    If the parameter is an actual kind, and it refers to an variable, then we
    store the real address in stack;
    If the parameter is an actual kind but it refers to another actual, we will
    store the address the second actual stores in the stack.
